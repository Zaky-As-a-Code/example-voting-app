#new version = 3
services:
  vote:
    build: ./vote
    command: python app.py              #because the dockerfile doesn’t have a Entrypoint for running the application and keep it operating handling the requests - and this will make the Container to start and stop after the process is executed.  This instruction will override the CMD in the Dockerfile to keep the server running and able to handle requests.
    depends_on:
     - redis
    volumes:
     - ./vote:/app
    ports:
      - "5000:80"
    networks:
      - front-tier
      - back-tier

  result:
    build: ./result
    entrypoint: nodemon server.js          #The entry point in the docker file is nodes which is not required in this app - so to replace it add the entrypoint here.
    depends_on:
      - db
    volumes:
      - ./result:/app
    ports:
      - "5001:80"
      - "5858:5858"
    networks:
      - front-tier
      - back-tier

  worker:
    build:
      context: ./worker
    depends_on:
      - redis
    networks:
      - back-tier

  redis:
    image: redis:alpine
    volumes:
      - "./healthchecks:/healthchecks"
    networks:
      - back-tier

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - "db-data:/var/lib/postgresql/data"
      - "./healthchecks:/healthchecks"
    networks:
      - back-tier

  # this service runs once to seed the database with votes relations and tables and sample data
  # it won't run unless you specify the "seed" profile
  # docker compose --profile seed up -d
  seed:
    build: ./seed-data
    profiles: ["seed"]
    depends_on:
      - vote
    networks:
      - front-tier
    restart: "no"  #as long as it’s specified as no - Docker compose will run the container one time then once the process is finished it won’t restart it (Not the default behavior of docker compose)

volumes:
  db-data:

networks:
  front-tier:
  back-tier:
